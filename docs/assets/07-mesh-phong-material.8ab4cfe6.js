import{a6 as W,G as j,a2 as F,I as z,D as A,c as x,M as D,d as C,B as I,e as R,g as V,h as q,S as O,P as T,W as J,A as N,a as $,b as K,O as Q,V as X}from"./OrbitControls.d879c3bb.js";import{d as Y,g as y,h as Z,c as ee,f as _,o as ne}from"./index.3e71378a.js";const ae={class:"viewCon"},me=Y({__name:"07-mesh-phong-material",setup(te){const{random:oe,PI:S,floor:se,ceil:ie,min:re,max:de,sin:ce,cos:le}=Math,M=y(),v=y();let d=window.innerWidth,c=window.innerHeight,b,w,a,l,p,f,i,h,m,n=new W({color:15221651});Z(()=>{k(),E(),U(),B(),G()});const o={selectMesh:"cube",color:15221651,emissive:0,specular:1118481,shininess:30,transparent:!1,opacity:1,side:"front",wireframe:!1,wireframeLinewidth:1,wireframeLinejoin:"round",wireframeLinecap:"round"};function k(){var g;let s=new j({autoPlace:!1,width:300});s.domElement.style.cssText="position: fixed; top: 0; right: 0;",(g=v.value)==null||g.appendChild(s.domElement);const t=s.addFolder("Mesh");t.open(),t.add(o,"selectMesh",["cube","sphere","plane"]).onChange(e=>{switch(a.remove(i),a.remove(h),a.remove(m),e){case"cube":{a.add(i);break}case"sphere":{a.add(h);break}case"plane":{a.add(m);break}}}),t.addColor(o,"color").onChange(e=>{n.color.setHex(e)}),t.add(o,"side",["front","back","doublue"]).onChange(e=>{n.side=e==="front"?F:e==="back"?z:A}),t.addColor(o,"emissive").onChange(e=>{n.emissive.setHex(e)}),t.addColor(o,"specular").onChange(e=>{n.specular.setHex(e)}),t.add(o,"shininess",0,200,1).onChange(e=>{n.shininess=e,n.needsUpdate=!0});const u=t.addFolder("transparent");u.open(),u.add(o,"transparent").onChange(e=>{n.transparent=e,n.needsUpdate=!0}),u.add(o,"opacity",0,1,.1).onChange(e=>{n.opacity=e,n.needsUpdate=!0});const r=t.addFolder("wireframe");r.add(o,"wireframe").onChange(e=>{n.wireframe=e}),r.add(o,"wireframeLinewidth",0,10,.1).name("lineWidth").onChange(e=>{n.wireframeLinewidth=e,n.needsUpdate=!0}),r.add(o,"wireframeLinejoin",["round","bevel","miter"]).name("lineJoin").onChange(e=>{n.wireframeLinejoin=e,n.needsUpdate=!0}),r.add(o,"wireframeLinecap",["butt","round","square"]).name("lineCap").onChange(e=>{n.wireframeLinecap=e,n.needsUpdate=!0})}let L=.02;function H(){i.rotation.y+=L,h.rotation.y+=L,m.rotation.y+=L}function U(){const s=new x(100,100,4,4),t=new D({color:4473924});f=new C(s,t),f.rotation.x=-.5*S,a.add(f);const u=new I(14,14,14),r=new R(7),g=new x(14,14);i=new C(u,n),h=new C(r,n),m=new C(g,n),i.position.set(0,10,0),h.position.set(0,10,0),m.position.set(0,10,0),a.add(i)}function B(){const s=new V(16777215,1);s.target=f,s.position.set(-50,50,50);const t=new q(s);a.add(s),a.add(t)}function E(){a=new O,l=new T(75,d/c,1,1e3),p=new J({canvas:M.value,antialias:!0}),p.setSize(d,c),window.addEventListener("resize",P),a.add(new N(1e3)),a.add(new $(4210752)),b=K(),v.value.append(b.dom),w=new Q(l,p.domElement),w.target=new X(0,0,0),w.object.position.set(40,40,40),w.update()}function G(){requestAnimationFrame(G),b.update(),H(),p.render(a,l)}function P(){d=window.innerWidth,c=window.innerHeight,l.aspect=d/c,l.updateProjectionMatrix(),p.setSize(d,c)}return(s,t)=>(ne(),ee("div",ae,[_("div",{class:"canvasCon",ref_key:"canvasCon",ref:v},[_("canvas",{class:"canvas",ref_key:"canvasDom",ref:M},null,512)],512)]))}});export{me as default};
